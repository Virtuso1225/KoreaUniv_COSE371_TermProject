[{"/Users/chaseungmin/projects/database_term_project/frontend/src/index.tsx":"1","/Users/chaseungmin/projects/database_term_project/frontend/src/theme/FontStyle.ts":"2","/Users/chaseungmin/projects/database_term_project/frontend/src/App.tsx":"3","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Homepage.tsx":"4","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Hotplacepage.tsx":"5","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/MypageMain.tsx":"6","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Reservationpage.tsx":"7","/Users/chaseungmin/projects/database_term_project/frontend/src/components/header/Header.tsx":"8","/Users/chaseungmin/projects/database_term_project/frontend/src/components/main/Main.tsx":"9","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageProfile.tsx":"10","/Users/chaseungmin/projects/database_term_project/frontend/src/components/hotplace/Hotplace.tsx":"11","/Users/chaseungmin/projects/database_term_project/frontend/src/components/reservation/Reservation.tsx":"12","/Users/chaseungmin/projects/database_term_project/frontend/src/components/header/HeaderStyle.tsx":"13","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageProfileStyle.tsx":"14","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypagePost.tsx":"15","/Users/chaseungmin/projects/database_term_project/frontend/src/components/main/MainStyle.tsx":"16","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReview.tsx":"17","/Users/chaseungmin/projects/database_term_project/frontend/src/components/reservation/ReservationStyle.tsx":"18","/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/Post.tsx":"19","/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostInfo.tsx":"20","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageOption.tsx":"21","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypagePostStyle.tsx":"22","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReviewStyle.tsx":"23","/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostStyle.tsx":"24","/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostInfoStyle.tsx":"25","/Users/chaseungmin/projects/database_term_project/frontend/src/components/modalpost/ModalPost.tsx":"26","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageOptionStyle.tsx":"27","/Users/chaseungmin/projects/database_term_project/frontend/src/components/newpost/Newpost.tsx":"28","/Users/chaseungmin/projects/database_term_project/frontend/src/components/newpost/NewpostStyle.tsx":"29","/Users/chaseungmin/projects/database_term_project/frontend/src/components/hotplace/HotplaceStyle.tsx":"30","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/NewPostpage.tsx":"31","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserve.tsx":"32","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserveStyle.tsx":"33","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserveDelete.tsx":"34"},{"size":627,"mtime":1638704770048,"results":"35","hashOfConfig":"36"},{"size":1130,"mtime":1638548754362,"results":"37","hashOfConfig":"36"},{"size":699,"mtime":1638855952313,"results":"38","hashOfConfig":"36"},{"size":249,"mtime":1638608006518,"results":"39","hashOfConfig":"36"},{"size":263,"mtime":1638718576502,"results":"40","hashOfConfig":"36"},{"size":282,"mtime":1638683430030,"results":"41","hashOfConfig":"36"},{"size":291,"mtime":1638705818936,"results":"42","hashOfConfig":"36"},{"size":3350,"mtime":1639012057787,"results":"43","hashOfConfig":"36"},{"size":1459,"mtime":1639003175773,"results":"44","hashOfConfig":"36"},{"size":3411,"mtime":1639041620020,"results":"45","hashOfConfig":"36"},{"size":1341,"mtime":1638824554442,"results":"46","hashOfConfig":"36"},{"size":2540,"mtime":1639053760156,"results":"47","hashOfConfig":"36"},{"size":2343,"mtime":1639011833031,"results":"48","hashOfConfig":"36"},{"size":1349,"mtime":1639003436116,"results":"49","hashOfConfig":"36"},{"size":1136,"mtime":1638821883610,"results":"50","hashOfConfig":"36"},{"size":409,"mtime":1639003175822,"results":"51","hashOfConfig":"36"},{"size":4256,"mtime":1639059737341,"results":"52","hashOfConfig":"36"},{"size":1401,"mtime":1639040174935,"results":"53","hashOfConfig":"36"},{"size":3885,"mtime":1639074750740,"results":"54","hashOfConfig":"36"},{"size":2066,"mtime":1639074452798,"results":"55","hashOfConfig":"36"},{"size":1371,"mtime":1638825193718,"results":"56","hashOfConfig":"36"},{"size":448,"mtime":1638700442478,"results":"57","hashOfConfig":"36"},{"size":2375,"mtime":1639056739911,"results":"58","hashOfConfig":"36"},{"size":2623,"mtime":1639074750826,"results":"59","hashOfConfig":"36"},{"size":638,"mtime":1638605019277,"results":"60","hashOfConfig":"36"},{"size":2387,"mtime":1639037835792,"results":"61","hashOfConfig":"36"},{"size":608,"mtime":1638680290790,"results":"62","hashOfConfig":"36"},{"size":5126,"mtime":1639053420791,"results":"63","hashOfConfig":"36"},{"size":1995,"mtime":1639003407175,"results":"64","hashOfConfig":"36"},{"size":894,"mtime":1639003310177,"results":"65","hashOfConfig":"36"},{"size":267,"mtime":1638855942191,"results":"66","hashOfConfig":"36"},{"size":4057,"mtime":1639054357822,"results":"67","hashOfConfig":"36"},{"size":1676,"mtime":1639044195455,"results":"68","hashOfConfig":"36"},{"size":2971,"mtime":1639045232420,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"17ftcgo",{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"72"},"/Users/chaseungmin/projects/database_term_project/frontend/src/index.tsx",[],["149","150","151","152","153"],"/Users/chaseungmin/projects/database_term_project/frontend/src/theme/FontStyle.ts",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/App.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Homepage.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Hotplacepage.tsx",["154"],"import React from 'react';\nimport Header from '../components/header/Header';\nimport Hotplace from '../components/hotplace/Hotplace';\n\nconst Hotplacepage = () => {\n  return (\n    <>\n      <Header />\n      <Hotplace />\n    </>\n  );\n};\n\nexport default Hotplacepage;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/pages/MypageMain.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/pages/Reservationpage.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/header/Header.tsx",["155","156"],"/* eslint-disable camelcase */\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport {\n  HeaderContainer,\n  HeaderTitle,\n  HeaderWrapper,\n  MypageLink,\n  PageLink,\n  ResultProfile,\n  ResultRowWrapper,\n  ResultUser,\n  Search,\n  SearchBox,\n} from './HeaderStyle';\n\ninterface profileProps {\n  id: string;\n  profile_img: string;\n}\n\nconst Header: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [input, setInput] = useState('');\n  const [init, setInit] = useState(false);\n  const [results, setResults] = useState<profileProps[]>([]);\n  const projectClick = () => {\n    window.location.href = '/char_kak';\n  };\n  const toMainpage = () => {\n    window.location.href = '/';\n  };\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n    fetch(`http://localhost:3001/searchuser/${e.target.value}`)\n      .then((res) => res.json())\n      .then((data: profileProps[]) => {\n        console.log(data);\n        setResults(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  };\n  return (\n    <>\n      <HeaderContainer>\n        <HeaderWrapper>\n          <HeaderTitle onClick={toMainpage}>PICFast</HeaderTitle>\n          <Search\n            placeholder=\"검색하기\"\n            onChange={onChange}\n            onClick={() => setIsOpen(true)}\n          />\n          <PageLink to=\"/reserve\">예약</PageLink>\n          <PageLink to=\"/place\">핫플레이스</PageLink>\n          <MypageLink onClick={projectClick}>마이페이지</MypageLink>\n        </HeaderWrapper>\n      </HeaderContainer>\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={() => setIsOpen(false)}\n        style={{\n          overlay: {\n            position: 'fixed',\n            top: 60,\n            left: -100,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'transparent',\n            zIndex: 0,\n            transition: '2s',\n          },\n          content: {\n            zIndex: 0,\n            position: 'absolute',\n            left: '600px',\n            right: '700px',\n            bottom: '300px',\n            background: '#fff',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            borderRadius: '4px',\n            outline: 'none',\n            display: 'flex',\n            justifyContent: 'center',\n            boxShadow: '6px 6px 12px rgba(0,0,0,0.1)',\n            transition: '1s',\n          },\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          {init ? (\n            <>\n              {results.map((result) => (\n                <div key={result.id}>\n                  {input ? (\n                    <ResultRowWrapper\n                      onClick={() => {\n                        window.location.href = `${result?.id}`;\n                      }}\n                    >\n                      <ResultProfile src={result?.profile_img} />\n                      <ResultUser>{result?.id}</ResultUser>\n                    </ResultRowWrapper>\n                  ) : (\n                    ''\n                  )}\n                </div>\n              ))}\n            </>\n          ) : (\n            ''\n          )}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default Header;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/main/Main.tsx",["157"],"/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { AiOutlinePlus } from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport Newpost from '../newpost/Newpost';\nimport { NewpostButton } from '../newpost/NewpostStyle';\nimport Post from '../post/Post';\nimport { BackgroundWrapper, SelectionCard } from './MainStyle';\n\ninterface postProps {\n  post_id: number;\n  writer_id: string;\n  title: string;\n  picture: string;\n  timestamp: Date;\n  date: string;\n  m_id: string;\n  m_name: string;\n  m_area: string;\n  m_gender: string;\n  m_img: string;\n  p_id: string;\n  p_name: string;\n  p_area: string;\n  p_career: string;\n  p_img: string;\n  place_name: string;\n  camera_name: string;\n}\n\nconst Main: React.FC = () => {\n  const [posts, setPosts] = useState<postProps[]>([]);\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    fetch('http://localhost:3001')\n      .then((res) => res.json())\n      .then((data: postProps[]) => {\n        setPosts(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  }, []);\n  return (\n    <BackgroundWrapper>\n      {posts.map((post) => (\n        <SelectionCard key={post.post_id}>\n          {init ? <Post {...post} /> : ''}\n        </SelectionCard>\n      ))}\n      <Link to=\"/create\">\n        <NewpostButton>\n          <AiOutlinePlus size=\"20\" color=\"black\" />\n        </NewpostButton>\n      </Link>\n    </BackgroundWrapper>\n  );\n};\n\nexport default Main;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageProfile.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/hotplace/Hotplace.tsx",["158"],"/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { AiFillFire } from 'react-icons/ai';\nimport {\n  BackgroundWrapper,\n  Content,\n  HotplaceTag,\n  RowWrapper,\n  Title,\n} from './HotplaceStyle';\n\ninterface placeProps {\n  place_id: number;\n  place_name: string;\n  post_num: number;\n}\nconst Hotplace = () => {\n  const [places, setPlaces] = useState<placeProps[]>([]);\n  const [init, setInit] = useState(false);\n\n  useEffect(() => {\n    fetch('http://localhost:3001/place')\n      .then((res) => res.json())\n      .then((data: placeProps[]) => {\n        setPlaces(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  }, []);\n  return (\n    <BackgroundWrapper>\n      {init ? (\n        <>\n          {places.map((place) => (\n            <div key={place.place_id}>\n              {place.post_num ? (\n                <HotplaceTag>\n                  <RowWrapper>\n                    <AiFillFire size=\"20\" />\n                    <Title>{place.place_name}</Title>\n                  </RowWrapper>\n                  <Content>활용된 게시물 수: {place.post_num}</Content>\n                </HotplaceTag>\n              ) : (\n                ''\n              )}\n            </div>\n          ))}\n        </>\n      ) : (\n        ''\n      )}\n    </BackgroundWrapper>\n  );\n};\n\nexport default Hotplace;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/reservation/Reservation.tsx",["159","160"],"/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Photographer } from '../post/PostInfo';\nimport {\n  PhotographerCareer,\n  PhotographerImg,\n  PhotographerInfo,\n  PhotographerName,\n} from '../post/PostInfoStyle';\nimport {\n  ReservationWrapper,\n  BackgroundWrapper,\n  DateSearchWrapper,\n  Text,\n  DateSearch,\n  AvailableWrapper,\n  Card,\n} from './ReservationStyle';\n\ninterface userProps {\n  id: string;\n  name: string;\n  area: string;\n  profile_img: string;\n  career: string;\n  gender: string;\n  type: string;\n}\n\nconst Reservation: React.FC = () => {\n  const [input, setInput] = useState('');\n  const [users, setUsers] = useState<userProps[]>([]);\n  const [init, setInit] = useState(false);\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n    fetch(`http://localhost:3001/reserve/${e.target.value}`)\n      .then((res) => res.json())\n      .then((data: userProps[]) => {\n        setUsers(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  };\n\n  return (\n    <BackgroundWrapper>\n      <ReservationWrapper>\n        <DateSearchWrapper>\n          <Text>날짜 검색하기</Text>\n          <DateSearch\n            placeholder=\"날짜 검색하기 (형식: 2021.11.02.)\"\n            onChange={onChange}\n            value={input}\n          />\n        </DateSearchWrapper>\n        {init ? (\n          <AvailableWrapper>\n            {users.map((user) => (\n              <Card key={user.id}>\n                <PhotographerImg src={user.profile_img} />\n                <PhotographerInfo>\n                  <Link to={`/${user.id}`} style={{ textDecoration: 'none' }}>\n                    <PhotographerName>\n                      {user.type === 'Photographer' ? '작가:' : '모델:'}{' '}\n                      {user.id}\n                    </PhotographerName>\n                  </Link>\n                  {user.type === 'Photographer' ? (\n                    <PhotographerCareer>\n                      경력: {user.career}~\n                    </PhotographerCareer>\n                  ) : (\n                    <PhotographerCareer>{user.gender} </PhotographerCareer>\n                  )}\n                  <PhotographerCareer>활동지역: {user.area}</PhotographerCareer>\n                </PhotographerInfo>\n              </Card>\n            ))}\n          </AvailableWrapper>\n        ) : (\n          ''\n        )}\n      </ReservationWrapper>\n    </BackgroundWrapper>\n  );\n};\n\nexport default Reservation;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/header/HeaderStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageProfileStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypagePost.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/main/MainStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReview.tsx",["161"],"/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { AiFillDelete, AiFillStar, AiOutlinePlus } from 'react-icons/ai';\nimport { useParams } from 'react-router-dom';\nimport MypageOption from './MypageOption';\nimport { BoldText } from './MypageProfileStyle';\nimport {\n  RateWrapper,\n  ReviewBlock,\n  ReviewContent,\n  ReviewContentInput,\n  ReviewWrapper,\n  RowWrapper,\n  SubmitReview,\n  UserId,\n  ReviewInputBlock,\n  SubmitButton,\n} from './MypageReviewStyle';\n\ninterface commentProps {\n  comment_id: number;\n  commentor_id: string;\n  photographer_id: string;\n  rate: string;\n  content: string;\n}\nconst MypageReview: React.FC = () => {\n  const [comments, setComments] = useState<commentProps[]>([]);\n  const [init, setInit] = useState(false);\n  const [show, setShow] = useState(false);\n  const [input, setInput] = useState('');\n  const [rate, setRate] = useState(0);\n  const params = useParams();\n  const current = params.user_id;\n  useEffect(() => {\n    fetch(`http://localhost:3001/review/${current}`)\n      .then((res) => res.json())\n      .then((data: commentProps[]) => {\n        setComments(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  }, []);\n\n  const reviewSubmit = () => {\n    setShow(!show);\n  };\n  const onChangeReview = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n  };\n  const onChangeRate = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRate(e.target.valueAsNumber);\n  };\n\n  const submitHandler = () => {\n    fetch('http://localhost:3001/post/comment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        Commentor_id: 'char_kak',\n        photographer_id: current,\n        Rate: rate,\n        Content: input,\n      }),\n    }).then(() => {\n      setShow(!show);\n      window.location.href = `/${current}/review`;\n    });\n  };\n\n  const deleteHandler = (comment_id: number) => {\n    fetch(`http://localhost:3001/comment/delete/${comment_id}`, {\n      method: 'DELETE',\n    }).then((data) => {\n      console.log(data);\n      window.location.href = `/${current}/review`;\n    });\n  };\n  return (\n    <>\n      <MypageOption />\n      {init ? (\n        <ReviewWrapper>\n          {current !== 'char_kak' ? (\n            <SubmitReview onClick={reviewSubmit}>\n              {!show ? <AiOutlinePlus size=\"20\" color=\"black\" /> : 'x'}\n            </SubmitReview>\n          ) : (\n            ''\n          )}\n          {show ? (\n            <ReviewInputBlock>\n              <ReviewContentInput\n                placeholder=\"리뷰 내용을 입력하세요\"\n                onChange={onChangeReview}\n                value={input}\n              />\n              <ReviewContentInput\n                placeholder=\"평점을 입력하세요\"\n                onChange={onChangeRate}\n                value={rate}\n                type=\"number\"\n              />\n              <SubmitButton onClick={submitHandler}>등록하기</SubmitButton>\n            </ReviewInputBlock>\n          ) : (\n            ''\n          )}\n          {comments.map((comment) => (\n            <ReviewBlock key={comment.comment_id}>\n              <RowWrapper>\n                <UserId>{comment.commentor_id}</UserId>\n                <RateWrapper>\n                  <AiFillStar size=\"20\" style={{ marginRight: '10' }} />\n                  <BoldText>{comment.rate}</BoldText>\n                  {current !== 'char_kak' ? (\n                    <button\n                      type=\"button\"\n                      style={{\n                        marginLeft: '3px',\n                        cursor: 'pointer',\n                        background: 'none',\n                        border: 'none',\n                      }}\n                      onClick={() => deleteHandler(comment.comment_id)}\n                    >\n                      <AiFillDelete size=\"20\" />\n                    </button>\n                  ) : (\n                    ''\n                  )}\n                </RateWrapper>\n              </RowWrapper>\n              <ReviewContent>{comment.content}</ReviewContent>\n            </ReviewBlock>\n          ))}\n        </ReviewWrapper>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default MypageReview;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/reservation/ReservationStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/Post.tsx",["162","163"],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostInfo.tsx",["164","165","166","167"],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageOption.tsx",["168"],"import React, { useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { ButtonLink, ButtonsWrapper } from './MypageOptionStyle';\n\ninterface userType {\n  type: string;\n}\n\nconst MypageOption: React.FC = () => {\n  const location = useLocation();\n  const current = location.pathname;\n  const params = useParams();\n  const user = params.user_id;\n  const [isPost, setIsPost] = useState(false);\n  const [isReview, setIsReview] = useState(false);\n  const [userType, setUserType] = useState<userType[]>([]);\n  const [init, setInit] = useState(false);\n  useEffect(() => {\n    switch (current) {\n      case `/${user}/review`:\n        setIsReview(true);\n        break;\n      default:\n        setIsPost(true);\n    }\n    fetch(`http://localhost:3001/type/${user}`)\n      .then((res) => res.json())\n      .then((data: userType[]) => {\n        console.log(data);\n        setUserType(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  }, []);\n  return (\n    <ButtonsWrapper>\n      <ButtonLink to={`/${user}`} isSelected={isPost}>\n        게시물\n      </ButtonLink>\n      {init && userType[0].type === 'Photographer' ? (\n        <ButtonLink to={`/${user}/review`} isSelected={isReview}>\n          리뷰\n        </ButtonLink>\n      ) : (\n        ''\n      )}\n    </ButtonsWrapper>\n  );\n};\n\nexport default MypageOption;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypagePostStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReviewStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/post/PostInfoStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/modalpost/ModalPost.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageOptionStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/newpost/Newpost.tsx",["169","170","171","172","173"],"/* eslint-disable camelcase */\nimport React, { useRef, useState } from 'react';\nimport {\n  FileButton,\n  Inputs,\n  NewpostButton,\n  NewpostCard,\n  NewpostWrapper,\n  SubmitButton,\n} from './NewpostStyle';\n\ninterface picInfoProps {\n  pic_info_id: number;\n}\n\nconst Newpost: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [photographer, setPhotographer] = useState('');\n  const [model, setModel] = useState('');\n  const [place, setPlace] = useState('');\n  const [date, setDate] = useState('');\n  const [camera, setCamera] = useState('');\n  const [manu, setManu] = useState('');\n  const [pic, setPic] = useState<any>();\n  const onClick = () => {\n    window.location.href = '/';\n  };\n\n  const convertToBase64 = (file: any) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n\n  const onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const img = e.target.files ? e.target.files[0] : new File([], 'img');\n    const temp = await convertToBase64(img);\n    setPic(temp);\n  };\n\n  const fileInput = useRef<any>(null);\n\n  const PostSubmit = () => {\n    fetch('http://localhost:3001/create/init', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        photographer,\n        model,\n        place,\n        date,\n        camera,\n        manu,\n        pic,\n      }),\n    })\n      .then(() => {\n        return fetch('http://localhost:3001/create/pictureinfo', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            photographer,\n            model,\n            place,\n            camera,\n            manu,\n            date,\n          }),\n        }).then((res) => {\n          if (res.status === 500) {\n            throw new Error('pic_info_error');\n          }\n          return res;\n        });\n      })\n      .then((response) => response.json())\n      .then((data: picInfoProps[]) => data[0].pic_info_id)\n      .then((data) => {\n        return fetch('http://localhost:3001/create/post', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title,\n            pic,\n            data,\n            place,\n          }),\n        }).then((res) => {\n          return res;\n        });\n      })\n      .then(() => {\n        window.location.href = '/';\n      })\n      .catch((error) => {\n        alert('잘못된 정보가 없는지 다시 확인해주세요.');\n      });\n  };\n\n  return (\n    <div style={{ marginTop: '100px' }}>\n      <NewpostButton onClick={onClick}>x</NewpostButton>\n      <NewpostWrapper>\n        <NewpostCard>\n          <form>\n            <input\n              type=\"file\"\n              ref={fileInput}\n              accept=\"image/jpg,impge/png,image/jpeg,image/gif\"\n              name=\"profile_img\"\n              onChange={onChange}\n              style={{ display: 'none' }}\n            />\n            <FileButton onClick={() => fileInput?.current.click()}>\n              파일을 선택\n            </FileButton>\n          </form>\n          <Inputs\n            placeholder=\"게시물 제목\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setTitle(e.target.value);\n            }}\n            value={title}\n          />\n          <Inputs\n            placeholder=\"작가 아이디\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setPhotographer(e.target.value);\n            }}\n            value={photographer}\n          />\n          <Inputs\n            placeholder=\"모델 아이디\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setModel(e.target.value);\n            }}\n            value={model}\n          />\n          <Inputs\n            placeholder=\"장소 이름\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setPlace(e.target.value);\n            }}\n            value={place}\n          />\n          <Inputs\n            placeholder=\"사진의 날짜\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setDate(e.target.value);\n            }}\n            value={date}\n          />\n          <Inputs\n            placeholder=\"카메라 기종\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setCamera(e.target.value);\n            }}\n            value={camera}\n          />\n          <Inputs\n            placeholder=\"카메라 제조사\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setManu(e.target.value);\n            }}\n            value={manu}\n          />\n          <SubmitButton onClick={PostSubmit}>게시물 추가</SubmitButton>\n        </NewpostCard>\n      </NewpostWrapper>\n    </div>\n  );\n};\n\nexport default Newpost;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/newpost/NewpostStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/hotplace/HotplaceStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/pages/NewPostpage.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserve.tsx",["174","175","176"],"import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport { useParams } from 'react-router-dom';\nimport { DateSearch } from '../reservation/ReservationStyle';\nimport { ReservePopButton, ReserveSubmitButton } from './MypageReserveStyle';\n\nconst MypageReserve: React.FC = () => {\n  const params = useParams();\n  const current = params.user_id;\n  const [isOpen, setIsOpen] = useState(false);\n  const [alerts, setAlerts] = useState(false);\n  const [input, setInput] = useState('');\n  const onClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const submitAlert = () => {\n    if (input !== '') {\n      setIsOpen(false);\n      fetch('http://localhost:3001/post/reserve', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          id: current,\n          date: input,\n        }),\n      })\n        .then((res) => {\n          console.log(res);\n          if (res.status === 500) {\n            throw new Error('중복된 날짜 입니다.');\n          }\n          return res;\n        })\n        .then((data) => data.status)\n        .then((data) => {\n          if (data === 200) {\n            setAlerts(true);\n          }\n        })\n        .catch((error) => {\n          alert(error);\n        });\n    } else {\n      alert('값이 입력되지 않은 상태입니다.');\n    }\n  };\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(e.target.value);\n  };\n  return (\n    <>\n      <Modal\n        isOpen={alerts}\n        onRequestClose={() => {\n          setAlerts(false);\n          setInput('');\n        }}\n        style={{\n          overlay: {\n            zIndex: 10,\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.25)',\n          },\n          content: {\n            position: 'absolute',\n            top: '400px',\n            left: '700px',\n            right: '700px',\n            bottom: '400px',\n            background: '#fff',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            borderRadius: '30px',\n            outline: 'none',\n            padding: '20px',\n            display: 'flex',\n            justifyContent: 'center',\n          },\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          등록이 완료되었습니다.\n        </div>\n      </Modal>\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={() => {\n          setIsOpen(false);\n          setInput('');\n        }}\n        style={{\n          overlay: {\n            zIndex: 10,\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.25)',\n          },\n          content: {\n            position: 'absolute',\n            top: '300px',\n            left: '600px',\n            right: '600px',\n            bottom: '300px',\n            background: '#fff',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            borderRadius: '30px',\n            outline: 'none',\n            padding: '20px',\n            display: 'flex',\n            justifyContent: 'center',\n          },\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <DateSearch\n            placeholder=\"날짜를 입력해주세요 (2021.11.01.)\"\n            onChange={onChange}\n            value={input}\n          />\n          <ReserveSubmitButton onClick={submitAlert}>\n            등록하기\n          </ReserveSubmitButton>\n        </div>\n      </Modal>\n      <ReservePopButton onClick={onClick}>일정 등록하기</ReservePopButton>\n    </>\n  );\n};\n\nexport default MypageReserve;\n","/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserveStyle.tsx",[],"/Users/chaseungmin/projects/database_term_project/frontend/src/components/mypage/MypageReserveDelete.tsx",["177"],"import React, { useState } from 'react';\nimport { AiFillDelete } from 'react-icons/ai';\nimport Modal from 'react-modal';\nimport { useParams } from 'react-router-dom';\nimport { DateText, DateWrapper, ReservePopButton } from './MypageReserveStyle';\n\ninterface dateProps {\n  id: number;\n  date: string;\n  concept: string;\n  pay: string;\n}\n\nconst MypageReserveDelete: React.FC = () => {\n  const params = useParams();\n  const current = params.user_id;\n  const [isOpen, setIsOpen] = useState(false);\n  const [dates, setDates] = useState<dateProps[]>([]);\n  const [init, setInit] = useState(false);\n\n  const onClick = () => {\n    setIsOpen(!isOpen);\n    fetch(`http://localhost:3001/get/reserved/${current}`)\n      .then((res) => res.json())\n      .then((data: dateProps[]) => {\n        setDates(data);\n      })\n      .then(() => {\n        setInit(true);\n      });\n  };\n\n  const deleteClick = (date: string) => {\n    fetch(`http://localhost:3001/delete/date/${current}/${date}`, {\n      method: 'DELETE',\n    })\n      .then((data) => {\n        console.log(data);\n      })\n      .then(() => {\n        setIsOpen(false);\n      });\n  };\n  return (\n    <>\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={() => {\n          setIsOpen(false);\n        }}\n        style={{\n          overlay: {\n            zIndex: 10,\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.25)',\n          },\n          content: {\n            position: 'absolute',\n            top: '300px',\n            left: '600px',\n            right: '600px',\n            bottom: '80px',\n            background: '#fff',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            borderRadius: '30px',\n            outline: 'none',\n            padding: '20px',\n            display: 'flex',\n            justifyContent: 'center',\n          },\n        }}\n      >\n        {init ? (\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {dates.map((date) => (\n              <DateWrapper key={date.id}>\n                <DateText>{date?.date}</DateText>\n                <button\n                  type=\"button\"\n                  style={{\n                    cursor: 'pointer',\n                    border: 'none',\n                    background: 'none',\n                  }}\n                  onClick={() => {\n                    deleteClick(date?.date);\n                  }}\n                >\n                  <AiFillDelete size=\"20\" />\n                </button>\n              </DateWrapper>\n            ))}\n          </div>\n        ) : (\n          ''\n        )}\n      </Modal>\n      <ReservePopButton onClick={onClick}>일정 삭제하기</ReservePopButton>\n    </>\n  );\n};\n\nexport default MypageReserveDelete;\n",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":5,"column":22,"nodeType":"190","messageId":"191","endLine":5,"endColumn":27},{"ruleId":"192","severity":1,"message":"193","line":14,"column":3,"nodeType":"194","messageId":"195","endLine":14,"endColumn":12},{"ruleId":"196","severity":1,"message":"197","line":38,"column":9,"nodeType":"198","messageId":"199","endLine":38,"endColumn":20},{"ruleId":"192","severity":1,"message":"200","line":5,"column":8,"nodeType":"194","messageId":"195","endLine":5,"endColumn":15},{"ruleId":"188","severity":1,"message":"189","line":17,"column":18,"nodeType":"190","messageId":"191","endLine":17,"endColumn":23},{"ruleId":"192","severity":1,"message":"201","line":2,"column":17,"nodeType":"194","messageId":"195","endLine":2,"endColumn":26},{"ruleId":"192","severity":1,"message":"202","line":4,"column":10,"nodeType":"194","messageId":"195","endLine":4,"endColumn":22},{"ruleId":"196","severity":1,"message":"197","line":78,"column":7,"nodeType":"198","messageId":"199","endLine":78,"endColumn":18},{"ruleId":"192","severity":1,"message":"203","line":25,"column":8,"nodeType":"194","messageId":"195","endLine":25,"endColumn":15},{"ruleId":"192","severity":1,"message":"204","line":75,"column":3,"nodeType":"194","messageId":"195","endLine":75,"endColumn":12},{"ruleId":"192","severity":1,"message":"205","line":3,"column":10,"nodeType":"194","messageId":"195","endLine":3,"endColumn":14},{"ruleId":"192","severity":1,"message":"206","line":10,"column":8,"nodeType":"194","messageId":"195","endLine":10,"endColumn":27},{"ruleId":"192","severity":1,"message":"207","line":30,"column":3,"nodeType":"194","messageId":"195","endLine":30,"endColumn":9},{"ruleId":"192","severity":1,"message":"208","line":62,"column":3,"nodeType":"194","messageId":"195","endLine":62,"endColumn":9},{"ruleId":"196","severity":1,"message":"197","line":29,"column":9,"nodeType":"198","messageId":"199","endLine":29,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":24,"column":34,"nodeType":"211","messageId":"212","endLine":24,"endColumn":37,"suggestions":"213"},{"ruleId":"209","severity":1,"message":"210","line":29,"column":34,"nodeType":"211","messageId":"212","endLine":29,"endColumn":37,"suggestions":"214"},{"ruleId":"209","severity":1,"message":"210","line":48,"column":28,"nodeType":"211","messageId":"212","endLine":48,"endColumn":31,"suggestions":"215"},{"ruleId":"192","severity":1,"message":"216","line":108,"column":15,"nodeType":"194","messageId":"195","endLine":108,"endColumn":20},{"ruleId":"217","severity":1,"message":"218","line":109,"column":9,"nodeType":"219","messageId":"199","endLine":109,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":30,"column":11,"nodeType":"198","messageId":"199","endLine":30,"endColumn":22},{"ruleId":"217","severity":1,"message":"218","line":43,"column":11,"nodeType":"219","messageId":"199","endLine":43,"endColumn":23},{"ruleId":"217","severity":1,"message":"218","line":46,"column":7,"nodeType":"219","messageId":"199","endLine":46,"endColumn":33},{"ruleId":"196","severity":1,"message":"197","line":38,"column":9,"nodeType":"198","messageId":"199","endLine":38,"endColumn":20},"lines-around-directive",["220"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'SearchBox' is defined but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","'Newpost' is defined but never used.","'useEffect' is defined but never used.","'Photographer' is defined but never used.","'profile' is defined but never used.","'timestamp' is defined but never used.","'Link' is defined but never used.","'PhotographerProfile' is defined but never used.","'p_name' is defined but never used.","'m_name' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["221","222"],["223","224"],["225","226"],"'error' is defined but never used.","no-alert","Unexpected alert.","CallExpression","padding-line-between-statements",{"messageId":"227","fix":"228","desc":"229"},{"messageId":"230","fix":"231","desc":"232"},{"messageId":"227","fix":"233","desc":"229"},{"messageId":"230","fix":"234","desc":"232"},{"messageId":"227","fix":"235","desc":"229"},{"messageId":"230","fix":"236","desc":"232"},"suggestUnknown",{"range":"237","text":"238"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"237","text":"239"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"240","text":"238"},{"range":"240","text":"239"},{"range":"241","text":"238"},{"range":"241","text":"239"},[629,632],"unknown","never",[734,737],[1277,1280]]